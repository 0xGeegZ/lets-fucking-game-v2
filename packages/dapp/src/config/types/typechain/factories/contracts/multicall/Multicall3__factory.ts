/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../../contracts/multicall/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611de5806100206000396000f3fe6080604052600436106100c35760003560e01c80630f28c97d146100c8578063174dea71146100f3578063252dba421461012357806327e86d6e146101545780633408e4701461017f578063399542e9146101aa5780633e64a696146101dc57806342cbb15c146102075780634d2301cc1461023257806372425d9d1461026f57806382ad56cb1461029a57806386d516e8146102ca578063a8b0574e146102f5578063bce38bd714610320578063c3077fa914610350578063ee82ac5e14610382575b600080fd5b3480156100d457600080fd5b506100dd6103bf565b6040516100ea919061143f565b60405180910390f35b61010d600480360381019061010891906114c9565b6103ef565b60405161011a91906116c0565b60405180910390f35b61013d60048036038101906101389190611738565b610802565b60405161014b929190611847565b60405180910390f35b34801561016057600080fd5b50610169610b14565b6040516101769190611890565b60405180910390f35b34801561018b57600080fd5b50610194610b5c565b6040516101a1919061143f565b60405180910390f35b6101c460048036038101906101bf91906118d7565b610b8c565b6040516101d393929190611937565b60405180910390f35b3480156101e857600080fd5b506101f1610bfe565b6040516101fe919061143f565b60405180910390f35b34801561021357600080fd5b5061021c610c2e565b604051610229919061143f565b60405180910390f35b34801561023e57600080fd5b50610259600480360381019061025491906119d3565b610c5e565b604051610266919061143f565b60405180910390f35b34801561027b57600080fd5b50610284610ca7565b604051610291919061143f565b60405180910390f35b6102b460048036038101906102af9190611a56565b610cd7565b6040516102c191906116c0565b60405180910390f35b3480156102d657600080fd5b506102df610fcd565b6040516102ec919061143f565b60405180910390f35b34801561030157600080fd5b5061030a610ffd565b6040516103179190611ab2565b60405180910390f35b61033a600480360381019061033591906118d7565b61102d565b60405161034791906116c0565b60405180910390f35b61036a60048036038101906103659190611738565b611388565b60405161037993929190611937565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a49190611af9565b6113d4565b6040516103b69190611890565b60405180910390f35b60006103d567c7b9fec8321f1f6160c01b611407565b6103e967167874d9e83d44f060c01b611407565b42905090565b6060610405671560a96b495049d560c01b611407565b610419674e6d859785519ee160c01b611407565b61042d67ab1bdb7288f3c8a460c01b611407565b6000610443676d248698239badc760c01b611407565b61045767bd742733d45a569560c01b611407565b6000848490509050610473678d7fb14976766be660c01b611407565b8067ffffffffffffffff81111561048d5761048c611b26565b5b6040519080825280602002602001820160405280156104c657816020015b6104b361140a565b8152602001906001900390816104ab5790505b5092506104dd6753fd89f4e29bc3da60c01b611407565b6104f167d9859ed76c931b4a60c01b611407565b36610506674a1e988a8362a59760c01b611407565b61051a67f3dde420860ed03d60c01b611407565b60005b82811015610766576105396726330e6e52afd8c960c01b611407565b61054d6771641284c5de28c360c01b611407565b600085828151811061056257610561611b55565b5b6020026020010151905061058067ae32d31b62ad8df060c01b611407565b87878381811061059357610592611b55565b5b90506020028101906105a59190611b93565b92506105bb6767329e8ebf6c040860c01b611407565b6105cf67a6660b5f7bde0dc460c01b611407565b6000836040013590506105ec67fd71e467db60b7f760c01b611407565b61060067a4ba171fc5e96d6460c01b611407565b80860195506106196721c9118434054dcb60c01b611407565b83600001602081019061062c91906119d3565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906106539190611bbb565b604051610661929190611c5d565b60006040518083038185875af1925050503d806000811461069e576040519150601f19603f3d011682016040523d82523d6000602084013e6106a3565b606091505b508360000184602001829052821515151581525050506106cd679a7b8a371626e9be60c01b611407565b8151602085013517610731577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b61074567d049ec85420706e360c01b611407565b61075967ed5912e8cab00f3e60c01b611407565b826001019250505061051d565b5061077b6725bf799acc1f232760c01b611407565b61078f6746bab511648b2bb060c01b611407565b6107a367a25f1ccd63fdb4b960c01b611407565b8234146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc90611cd3565b60405180910390fd5b6107f9677f3199d129a6fe1a60c01b611407565b50505092915050565b6000606061081a67a5e7a14f03f927bf60c01b611407565b61082e67d2423a30b11cde1a60c01b611407565b439150610845676624a2190ab7f8d260c01b611407565b6108596784c27ba2e8c394a560c01b611407565b600084849050905061087567c81c0a2d7405ecac60c01b611407565b8067ffffffffffffffff81111561088f5761088e611b26565b5b6040519080825280602002602001820160405280156108c257816020015b60608152602001906001900390816108ad5790505b5091506108d96743636b51e61f3b2760c01b611407565b6108ed6716b1eb4d5a2cdf8660c01b611407565b3661090267671880f9830cf39b60c01b611407565b610916674b3fbf8a176c3c8160c01b611407565b60005b82811015610b0a57610935670c452a6f7888285660c01b611407565b610949677706569e6bc3e73a60c01b611407565b600061095f678dea02ac9461382660c01b611407565b87878381811061097257610971611b55565b5b90506020028101906109849190611cf3565b925061099a673b30da03e746f83560c01b611407565b8260000160208101906109ad91906119d3565b73ffffffffffffffffffffffffffffffffffffffff168380602001906109d39190611bbb565b6040516109e1929190611c5d565b6000604051808303816000865af19150503d8060008114610a1e576040519150601f19603f3d011682016040523d82523d6000602084013e610a23565b606091505b50868481518110610a3757610a36611b55565b5b602002602001018190528192505050610a5a676adaccdb10002ab960c01b611407565b610a6e67e325e3e312d95cbf60c01b611407565b610a82675509b4dff6d90d0a60c01b611407565b80610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990611d67565b60405180910390fd5b610ad6679cb762a33db3aabe60c01b611407565b610aea67e27dd58e8e85f0e660c01b611407565b610afe6796e05bead12f88a460c01b611407565b81600101915050610919565b5050509250929050565b6000610b2a678afc4c5511476eab60c01b611407565b610b3e6730582d862ae193ca60c01b611407565b610b526713b32cfbfb64609860c01b611407565b6001430340905090565b6000610b726787ea29b7de61695560c01b611407565b610b8667b4fde4c74c1d719560c01b611407565b46905090565b6000806060610ba5672b0c134df458295d60c01b611407565b610bb96797d95b2de78a57f360c01b611407565b439250610bd0679b6f9dce7c72065360c01b611407565b43409150610be86745a4cc0060ff0fed60c01b611407565b610bf386868661102d565b905093509350939050565b6000610c1467a1c64f89c40b22f260c01b611407565b610c2867b5fb5ec073e8fcf260c01b611407565b48905090565b6000610c44674e75c450d041f98160c01b611407565b610c5867de749590e303103c60c01b611407565b43905090565b6000610c7467dd74ec37c9ad4c0a60c01b611407565b610c8867508f074f06be5d5a60c01b611407565b8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b6000610cbd67c3501a868d6518e660c01b611407565b610cd167940f94c88128af5860c01b611407565b44905090565b6060610ced67a5858d4b46279a6960c01b611407565b610d0167737fe38a7b95f5ea60c01b611407565b610d156742bc71115931364560c01b611407565b6000838390509050610d3167bcc7b1d866ba25b260c01b611407565b8067ffffffffffffffff811115610d4b57610d4a611b26565b5b604051908082528060200260200182016040528015610d8457816020015b610d7161140a565b815260200190600190039081610d695790505b509150610d9b6716db86c576474e2860c01b611407565b610daf67dd04bacef8a4f76560c01b611407565b36610dc467e062e48e914e1c2a60c01b611407565b610dd86735b990843bd0377060c01b611407565b60005b82811015610fc457610df7670bada223dad7891f60c01b611407565b610e0b67c8885ffce326cbfe60c01b611407565b6000848281518110610e2057610e1f611b55565b5b60200260200101519050610e3e67467d63b416afcc8a60c01b611407565b868683818110610e5157610e50611b55565b5b9050602002810190610e639190611d87565b9250610e796744179525608615e860c01b611407565b826000016020810190610e8c91906119d3565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610eb29190611bbb565b604051610ec0929190611c5d565b6000604051808303816000865af19150503d8060008114610efd576040519150601f19603f3d011682016040523d82523d6000602084013e610f02565b606091505b50826000018360200182905282151515158152505050610f2c67bc5e5f6481526b3d60c01b611407565b8051602084013517610f90577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b610fa4677a55d89811e6f74e60c01b611407565b610fb867c1e337e7b61fae9e60c01b611407565b81600101915050610ddb565b50505092915050565b6000610fe367b38a3a9190f71fb660c01b611407565b610ff767979f3d364bb6e66760c01b611407565b45905090565b6000611013675c40c2e8b564401e60c01b611407565b61102767c59809719e69fe8160c01b611407565b41905090565b6060611043677e21a4de9a4b525960c01b611407565b6110576760b83ca42a8ca5cb60c01b611407565b61106b67cbf7fa9135a5db9660c01b611407565b6000838390509050611087675daa1a28cb2cbacb60c01b611407565b8067ffffffffffffffff8111156110a1576110a0611b26565b5b6040519080825280602002602001820160405280156110da57816020015b6110c761140a565b8152602001906001900390816110bf5790505b5091506110f1672b21892f7e6d144e60c01b611407565b6111056768e713fb9b7f491560c01b611407565b3661111a6739e4f6be9b26611960c01b611407565b61112e6753e6ebcbf88fd09b60c01b611407565b60005b8281101561137e5761114d671b1a03c0c350f26b60c01b611407565b6111616785cdbc6d3a668c0260c01b611407565b600084828151811061117657611175611b55565b5b60200260200101519050611194676a2f323c97e3b25760c01b611407565b8686838181106111a7576111a6611b55565b5b90506020028101906111b99190611cf3565b92506111cf678951f86e52582d4e60c01b611407565b8260000160208101906111e291906119d3565b73ffffffffffffffffffffffffffffffffffffffff168380602001906112089190611bbb565b604051611216929190611c5d565b6000604051808303816000865af19150503d8060008114611253576040519150601f19603f3d011682016040523d82523d6000602084013e611258565b606091505b5082600001836020018290528215151515815250505061128267fe259d17c79282a660c01b611407565b61129667e5f3e3af745698f360c01b611407565b8715611335576112b0678895bf380c3c23e860c01b611407565b6112c467a624e077efe10b3960c01b611407565b6112d867fd2ecd3ae1e30ef460c01b611407565b806000015161131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131390611d67565b60405180910390fd5b611330677e40f77b09baa6e360c01b611407565b61134a565b61134967e3d439ecb07a3a2960c01b611407565b5b61135e671034e5b2cc1d0c3c60c01b611407565b61137267deef236910fe48ee60c01b611407565b81600101915050611131565b5050509392505050565b60008060606113a1679403175dba36c4ac60c01b611407565b6113b5677e56bdee385a1a8260c01b611407565b6113c160018686610b8c565b8093508194508295505050509250925092565b60006113ea67e7402daf5dbc4ee560c01b611407565b6113fe67027538dc3240578460c01b611407565b81409050919050565b50565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b61143981611426565b82525050565b60006020820190506114546000830184611430565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261148957611488611464565b5b8235905067ffffffffffffffff8111156114a6576114a5611469565b5b6020830191508360208202830111156114c2576114c161146e565b5b9250929050565b600080602083850312156114e0576114df61145a565b5b600083013567ffffffffffffffff8111156114fe576114fd61145f565b5b61150a85828601611473565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b61155781611542565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561159757808201518184015260208101905061157c565b60008484015250505050565b6000601f19601f8301169050919050565b60006115bf8261155d565b6115c98185611568565b93506115d9818560208601611579565b6115e2816115a3565b840191505092915050565b6000604083016000830151611605600086018261154e565b506020830151848203602086015261161d82826115b4565b9150508091505092915050565b600061163683836115ed565b905092915050565b6000602082019050919050565b600061165682611516565b6116608185611521565b93508360208202850161167285611532565b8060005b858110156116ae578484038952815161168f858261162a565b945061169a8361163e565b925060208a01995050600181019050611676565b50829750879550505050505092915050565b600060208201905081810360008301526116da818461164b565b905092915050565b60008083601f8401126116f8576116f7611464565b5b8235905067ffffffffffffffff81111561171557611714611469565b5b6020830191508360208202830111156117315761173061146e565b5b9250929050565b6000806020838503121561174f5761174e61145a565b5b600083013567ffffffffffffffff81111561176d5761176c61145f565b5b611779858286016116e2565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006117bd83836115b4565b905092915050565b6000602082019050919050565b60006117dd82611785565b6117e78185611790565b9350836020820285016117f9856117a1565b8060005b85811015611835578484038952815161181685826117b1565b9450611821836117c5565b925060208a019950506001810190506117fd565b50829750879550505050505092915050565b600060408201905061185c6000830185611430565b818103602083015261186e81846117d2565b90509392505050565b6000819050919050565b61188a81611877565b82525050565b60006020820190506118a56000830184611881565b92915050565b6118b481611542565b81146118bf57600080fd5b50565b6000813590506118d1816118ab565b92915050565b6000806000604084860312156118f0576118ef61145a565b5b60006118fe868287016118c2565b935050602084013567ffffffffffffffff81111561191f5761191e61145f565b5b61192b868287016116e2565b92509250509250925092565b600060608201905061194c6000830186611430565b6119596020830185611881565b818103604083015261196b818461164b565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119a082611975565b9050919050565b6119b081611995565b81146119bb57600080fd5b50565b6000813590506119cd816119a7565b92915050565b6000602082840312156119e9576119e861145a565b5b60006119f7848285016119be565b91505092915050565b60008083601f840112611a1657611a15611464565b5b8235905067ffffffffffffffff811115611a3357611a32611469565b5b602083019150836020820283011115611a4f57611a4e61146e565b5b9250929050565b60008060208385031215611a6d57611a6c61145a565b5b600083013567ffffffffffffffff811115611a8b57611a8a61145f565b5b611a9785828601611a00565b92509250509250929050565b611aac81611995565b82525050565b6000602082019050611ac76000830184611aa3565b92915050565b611ad681611426565b8114611ae157600080fd5b50565b600081359050611af381611acd565b92915050565b600060208284031215611b0f57611b0e61145a565b5b6000611b1d84828501611ae4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611baf57611bae611b84565b5b80830191505092915050565b60008083356001602003843603038112611bd857611bd7611b84565b5b80840192508235915067ffffffffffffffff821115611bfa57611bf9611b89565b5b602083019250600182023603831315611c1657611c15611b8e565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000611c448385611c1e565b9350611c51838584611c29565b82840190509392505050565b6000611c6a828486611c38565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611cbd601a83611c76565b9150611cc882611c87565b602082019050919050565b60006020820190508181036000830152611cec81611cb0565b9050919050565b600082356001604003833603038112611d0f57611d0e611b84565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b6000611d51601783611c76565b9150611d5c82611d1b565b602082019050919050565b60006020820190508181036000830152611d8081611d44565b9050919050565b600082356001606003833603038112611da357611da2611b84565b5b8083019150509291505056fea26469706673582212206af98bd902620b42c0aaaa76368cf950b0e40aaf797ce1299494167eee75406764736f6c63430008100033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
