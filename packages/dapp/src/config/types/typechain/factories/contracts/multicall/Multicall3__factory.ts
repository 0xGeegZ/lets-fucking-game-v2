/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../../contracts/multicall/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c5e806100206000396000f3fe6080604052600436106100c35760003560e01c80630f28c97d146100c8578063174dea71146100ea578063252dba421461010a57806327e86d6e1461012b5780633408e47014610143578063399542e9146101565780633e64a6961461017857806342cbb15c1461018b5780634d2301cc1461019e57806372425d9d146101c657806382ad56cb146101d957806386d516e8146101ec578063a8b0574e146101ff578063bce38bd71461021a578063c3077fa91461022d578063ee82ac5e14610240575b600080fd5b3480156100d457600080fd5b50425b6040519081526020015b60405180910390f35b6100fd6100f83660046108d9565b61025f565b6040516100e191906109ce565b61011d6101183660046108d9565b610430565b6040516100e19291906109e8565b34801561013757600080fd5b504360001901406100d7565b34801561014f57600080fd5b50466100d7565b610169610164366004610a52565b610579565b6040516100e193929190610aab565b34801561018457600080fd5b50486100d7565b34801561019757600080fd5b50436100d7565b3480156101aa57600080fd5b506100d76101b9366004610ad3565b6001600160a01b03163190565b3480156101d257600080fd5b50446100d7565b6100fd6101e73660046108d9565b610594565b3480156101f857600080fd5b50456100d7565b34801561020b57600080fd5b506040514181526020016100e1565b6100fd610228366004610a52565b6106fc565b61016961023b3660046108d9565b610857565b34801561024c57600080fd5b506100d761025b366004610afc565b4090565b6060600082806001600160401b0381111561027c5761027c610b15565b6040519080825280602002602001820160405280156102b557816020015b6102a2610876565b81526020019060019003908161029a5790505b5092503660005b828110156103d55760008582815181106102d8576102d8610b2b565b602002602001015190508787838181106102f4576102f4610b2b565b90506020028101906103069190610b41565b60408101359586019590935061031f6020850185610ad3565b6001600160a01b0316816103366060870187610b61565b604051610344929190610ba7565b60006040518083038185875af1925050503d8060008114610381576040519150601f19603f3d011682016040523d82523d6000602084013e610386565b606091505b5060208085019190915290151580845290850135176103cb5762461bcd60e51b60005260206004526017602452600080516020610c0983398151915260445260846000fd5b50506001016102bc565b508234146104275760405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b60448201526064015b60405180910390fd5b50505092915050565b43606082806001600160401b0381111561044c5761044c610b15565b60405190808252806020026020018201604052801561047f57816020015b606081526020019060019003908161046a5790505b5091503660005b8281101561056f5760008787838181106104a2576104a2610b2b565b90506020028101906104b49190610bb7565b92506104c36020840184610ad3565b6001600160a01b03166104d96020850185610b61565b6040516104e7929190610ba7565b6000604051808303816000865af19150503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b5086848151811061053c5761053c610b2b565b60209081029190910101529050806105665760405162461bcd60e51b815260040161041e90610bcd565b50600101610486565b5050509250929050565b43804060606105898686866106fc565b905093509350939050565b606081806001600160401b038111156105af576105af610b15565b6040519080825280602002602001820160405280156105e857816020015b6105d5610876565b8152602001906001900390816105cd5790505b5091503660005b8281101561042757600084828151811061060b5761060b610b2b565b6020026020010151905086868381811061062757610627610b2b565b90506020028101906106399190610bf2565b92506106486020840184610ad3565b6001600160a01b031661065e6040850185610b61565b60405161066c929190610ba7565b6000604051808303816000865af19150503d80600081146106a9576040519150601f19603f3d011682016040523d82523d6000602084013e6106ae565b606091505b5060208084019190915290151580835290840135176106f35762461bcd60e51b60005260206004526017602452600080516020610c0983398151915260445260646000fd5b506001016105ef565b606081806001600160401b0381111561071757610717610b15565b60405190808252806020026020018201604052801561075057816020015b61073d610876565b8152602001906001900390816107355790505b5091503660005b8281101561084d57600084828151811061077357610773610b2b565b6020026020010151905086868381811061078f5761078f610b2b565b90506020028101906107a19190610bb7565b92506107b06020840184610ad3565b6001600160a01b03166107c66020850185610b61565b6040516107d4929190610ba7565b6000604051808303816000865af19150503d8060008114610811576040519150601f19603f3d011682016040523d82523d6000602084013e610816565b606091505b5060208301521515815287156108445780516108445760405162461bcd60e51b815260040161041e90610bcd565b50600101610757565b5050509392505050565b600080606061086860018686610579565b919790965090945092505050565b60408051808201909152600081526060602082015290565b60008083601f8401126108a057600080fd5b5081356001600160401b038111156108b757600080fd5b6020830191508360208260051b85010111156108d257600080fd5b9250929050565b600080602083850312156108ec57600080fd5b82356001600160401b0381111561090257600080fd5b61090e8582860161088e565b90969095509350505050565b6000815180845260005b8181101561094057602081850181015186830182015201610924565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b848110156109c157858303601f19018952815180511515845284015160408585018190526109ad8186018361091a565b9a86019a945050509083019060010161097d565b5090979650505050505050565b6020815260006109e16020830184610960565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610a4457605f19888703018452610a3286835161091a565b95509284019290840190600101610a16565b509398975050505050505050565b600080600060408486031215610a6757600080fd5b83358015158114610a7757600080fd5b925060208401356001600160401b03811115610a9257600080fd5b610a9e8682870161088e565b9497909650939450505050565b838152826020820152606060408201526000610aca6060830184610960565b95945050505050565b600060208284031215610ae557600080fd5b81356001600160a01b03811681146109e157600080fd5b600060208284031215610b0e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e19833603018112610b5757600080fd5b9190910192915050565b6000808335601e19843603018112610b7857600080fd5b8301803591506001600160401b03821115610b9257600080fd5b6020019150368190038213156108d257600080fd5b8183823760009101908152919050565b60008235603e19833603018112610b5757600080fd5b6020808252601790820152600080516020610c09833981519152604082015260600190565b60008235605e19833603018112610b5757600080fdfe4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000a26469706673582212203d985adc5dd1009d3063f97f0b1c0416d6e87181251128d41ff0c5ba1a38147264736f6c63430008100033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
