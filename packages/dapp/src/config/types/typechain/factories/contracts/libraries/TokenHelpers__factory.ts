/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenHelpers,
  TokenHelpersInterface,
} from "../../../contracts/libraries/TokenHelpers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FailedTransfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getERC20Balance",
    outputs: [
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getERC721TokenIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610ffc610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806338aeac71146100665780635ab2d30014610096578063b0e3fe37146100bf578063bbde570b146100e8578063c3a8962c14610111575b600080fd5b610080600480360381019061007b91906109ef565b610141565b60405161008d9190610af7565b60405180910390f35b8180156100a257600080fd5b506100bd60048036038101906100b89190610b45565b61039a565b005b8180156100cb57600080fd5b506100e660048036038101906100e19190610bac565b610539565b005b8180156100f457600080fd5b5061010f600480360381019061010a9190610b45565b610818565b005b61012b600480360381019061012691906109ef565b6108c9565b6040516101389190610bfb565b60405180910390f35b606061015767f3a4245af2b6976a60c01b610989565b61016b673ffc52e35140398260c01b610989565b61017f6783bbd25a5a64610660c01b610989565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016101ba9190610c25565b602060405180830381865afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610c55565b67ffffffffffffffff81111561021457610213610c82565b5b6040519080825280602002602001820160405280156102425781602001602082028036833780820191505090505b50905061025967afda72bf035e747560c01b610989565b61026d6788dfac0741a16efe60c01b610989565b6000610283674a9bc0cf2334a6bd60c01b610989565b61029767e112dcda998f370d60c01b610989565b600090505b8151811015610367576102b967d7575feca61d6cbb60c01b610989565b8473ffffffffffffffffffffffffffffffffffffffff16632f745c5985836040518363ffffffff1660e01b81526004016102f4929190610cc0565b602060405180830381865afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103359190610c55565b82828151811061034857610347610ce9565b5b602002602001018181525050808061035f90610d47565b91505061029c565b61037b67423f6f45f196668a60c01b610989565b61038f67c54c0ed6aed4b7a360c01b610989565b819250505092915050565b6103ae67efebdebc4e8f941c60c01b610989565b6103c2675119d05742b18ae860c01b610989565b6103d667dee053ea8cdf151960c01b610989565b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b815260040161041593929190610d8f565b6020604051808303816000875af1158015610434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104589190610dfe565b905061046e67c6367af5f8f4633060c01b610989565b61048267b24086f235b49bd760c01b610989565b8061051d5761049b676b6197bb72ae127760c01b610989565b6104af67afb493a7eb83e0ce60c01b610989565b6104c367fa244d47d6a2db9260c01b610989565b6000610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90610e88565b60405180910390fd5b610518673d58b86c6fc2b0d760c01b610989565b610532565b61053167ca84f7d8e122193a60c01b610989565b5b5050505050565b61054d67af0ac62a002ca26c60c01b610989565b80610562673c598f70aafaedeb60c01b610989565b61057667d6480c4ab6d5a0f660c01b610989565b61058a67d7316d6bc4e1bddd60c01b610989565b61059e675e808c122416a34560c01b610989565b804710156105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d890610ef4565b60405180910390fd5b6105f56719f1d09c7a4d426860c01b610989565b610609676af8bf7d3590abab60c01b610989565b61061d6789d232e15f613ef760c01b610989565b61063167fe0211a9a1ceb21860c01b610989565b61064567f93145dbef313b0260c01b610989565b610659675d4b7115aec0307760c01b610989565b60008373ffffffffffffffffffffffffffffffffffffffff168360405161067f90610f45565b60006040518083038185875af1925050503d80600081146106bc576040519150601f19603f3d011682016040523d82523d6000602084013e6106c1565b606091505b505090506106d9677aa24779455a758260c01b610989565b6106ed672aaa5574a633016760c01b610989565b806107fd5761070667898179740c8f3de160c01b610989565b61071a67aabb3ad714cf5a3e60c01b610989565b61072e67ea7aa09f8e13273760c01b610989565b7f3506b32cea6b36a739c1c2a71a9e1b3d6222104389c07219059fa6eb6d2e0563848460405161075f929190610cc0565b60405180910390a161077b67220f074fd7dab7d360c01b610989565b61078f67836e9256a77ded0a60c01b610989565b6107a36754d193b73cbabfb360c01b610989565b60006107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90610fa6565b60405180910390fd5b6107f8673b757db25226b16860c01b610989565b610812565b6108116788148a1451c6d2ce60c01b610989565b5b50505050565b61082c67bcbaf87ce851beb960c01b610989565b610840670c53eb44dd30690960c01b610989565b61085467849e8c2ccbb6e31160c01b610989565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b815260040161089193929190610d8f565b600060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b5050505050505050565b60006108df672c03d8d11620605c60c01b610989565b6108f3670a9759623d26cd3360c01b610989565b610907670996095293f8d70660c01b610989565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016109409190610c25565b602060405180830381865afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190610c55565b905092915050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109bc82610991565b9050919050565b6109cc816109b1565b81146109d757600080fd5b50565b6000813590506109e9816109c3565b92915050565b60008060408385031215610a0657610a0561098c565b5b6000610a14858286016109da565b9250506020610a25858286016109da565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610a6e81610a5b565b82525050565b6000610a808383610a65565b60208301905092915050565b6000602082019050919050565b6000610aa482610a2f565b610aae8185610a3a565b9350610ab983610a4b565b8060005b83811015610aea578151610ad18882610a74565b9750610adc83610a8c565b925050600181019050610abd565b5085935050505092915050565b60006020820190508181036000830152610b118184610a99565b905092915050565b610b2281610a5b565b8114610b2d57600080fd5b50565b600081359050610b3f81610b19565b92915050565b60008060008060808587031215610b5f57610b5e61098c565b5b6000610b6d878288016109da565b9450506020610b7e878288016109da565b9350506040610b8f878288016109da565b9250506060610ba087828801610b30565b91505092959194509250565b60008060408385031215610bc357610bc261098c565b5b6000610bd1858286016109da565b9250506020610be285828601610b30565b9150509250929050565b610bf581610a5b565b82525050565b6000602082019050610c106000830184610bec565b92915050565b610c1f816109b1565b82525050565b6000602082019050610c3a6000830184610c16565b92915050565b600081519050610c4f81610b19565b92915050565b600060208284031215610c6b57610c6a61098c565b5b6000610c7984828501610c40565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cba81610a5b565b82525050565b6000604082019050610cd56000830185610c16565b610ce26020830184610cb1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5282610a5b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8457610d83610d18565b5b600182019050919050565b6000606082019050610da46000830186610c16565b610db16020830185610c16565b610dbe6040830184610cb1565b949350505050565b60008115159050919050565b610ddb81610dc6565b8114610de657600080fd5b50565b600081519050610df881610dd2565b92915050565b600060208284031215610e1457610e1361098c565b5b6000610e2284828501610de9565b91505092915050565b600082825260208201905092915050565b7f416d6f756e74207472616e7366657274206661696c6564000000000000000000600082015250565b6000610e72601783610e2b565b9150610e7d82610e3c565b602082019050919050565b60006020820190508181036000830152610ea181610e65565b9050919050565b7f4e6f7420656e6f75676820696e20636f6e74726163742062616c616e63650000600082015250565b6000610ede601e83610e2b565b9150610ee982610ea8565b602082019050919050565b60006020820190508181036000830152610f0d81610ed1565b9050919050565b600081905092915050565b50565b6000610f2f600083610f14565b9150610f3a82610f1f565b600082019050919050565b6000610f5082610f22565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000610f90601083610e2b565b9150610f9b82610f5a565b602082019050919050565b60006020820190508181036000830152610fbf81610f83565b905091905056fea26469706673582212209845ab7ca60f596ae51b5276bf40720ad6776d33eae76e7e2f3d116f1dcda20e64736f6c63430008100033";

type TokenHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenHelpers__factory extends ContractFactory {
  constructor(...args: TokenHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenHelpers> {
    return super.deploy(overrides || {}) as Promise<TokenHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenHelpers {
    return super.attach(address) as TokenHelpers;
  }
  override connect(signer: Signer): TokenHelpers__factory {
    return super.connect(signer) as TokenHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenHelpersInterface {
    return new utils.Interface(_abi) as TokenHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenHelpers {
    return new Contract(address, _abi, signerOrProvider) as TokenHelpers;
  }
}
