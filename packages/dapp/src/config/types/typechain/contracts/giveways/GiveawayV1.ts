/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IChild {
  export type PrizeStruct = {
    position: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    standard: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type PrizeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    position: BigNumber;
    amount: BigNumber;
    standard: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
  };

  export type WinnerStruct = {
    roundId: PromiseOrValue<BigNumberish>;
    userId: PromiseOrValue<BigNumberish>;
    playerAddress: PromiseOrValue<string>;
    amountWon: PromiseOrValue<BigNumberish>;
    position: PromiseOrValue<BigNumberish>;
    standard: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    prizeClaimed: PromiseOrValue<boolean>;
  };

  export type WinnerStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean
  ] & {
    roundId: BigNumber;
    userId: BigNumber;
    playerAddress: string;
    amountWon: BigNumber;
    position: BigNumber;
    standard: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
    prizeClaimed: boolean;
  };
}

export interface GiveawayV1Interface extends utils.Interface {
  functions: {
    "MAX_TREASURY_FEE()": FunctionFragment;
    "addPrizes((uint256,uint256,uint256,address,uint256)[])": FunctionFragment;
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "claimPrize(uint256)": FunctionFragment;
    "claimTreasuryFee()": FunctionFragment;
    "createGiveaway(string,string,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,address,uint256)[])": FunctionFragment;
    "cronUpkeep()": FunctionFragment;
    "factory()": FunctionFragment;
    "fulfillGiveawayWinner(bytes32,uint256,bytes)": FunctionFragment;
    "fulfillRefreshGiveaway(bytes32,uint256,uint256)": FunctionFragment;
    "fulfillSignUp(bytes32,uint256,bool)": FunctionFragment;
    "getGiveawayURI(uint256)": FunctionFragment;
    "getPrizes(uint256)": FunctionFragment;
    "getSignUpURI(uint256)": FunctionFragment;
    "getWinners(uint256)": FunctionFragment;
    "giveaways(uint256)": FunctionFragment;
    "isSignedUp(uint256)": FunctionFragment;
    "jobId()": FunctionFragment;
    "keeper()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "refreshActiveGiveawayStatus()": FunctionFragment;
    "requestBaseURI()": FunctionFragment;
    "roundId()": FunctionFragment;
    "setTreasuryFee(uint256)": FunctionFragment;
    "signUp(uint256)": FunctionFragment;
    "transferAdminOwnership(address)": FunctionFragment;
    "transferFactoryOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "unpause()": FunctionFragment;
    "users(uint256)": FunctionFragment;
    "withdrawFunds(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TREASURY_FEE"
      | "addPrizes"
      | "cancelRequest"
      | "checkUpkeep"
      | "claimPrize"
      | "claimTreasuryFee"
      | "createGiveaway"
      | "cronUpkeep"
      | "factory"
      | "fulfillGiveawayWinner"
      | "fulfillRefreshGiveaway"
      | "fulfillSignUp"
      | "getGiveawayURI"
      | "getPrizes"
      | "getSignUpURI"
      | "getWinners"
      | "giveaways"
      | "isSignedUp"
      | "jobId"
      | "keeper"
      | "owner"
      | "pause"
      | "paused"
      | "performUpkeep"
      | "refreshActiveGiveawayStatus"
      | "requestBaseURI"
      | "roundId"
      | "setTreasuryFee"
      | "signUp"
      | "transferAdminOwnership"
      | "transferFactoryOwnership"
      | "treasuryAmount"
      | "treasuryFee"
      | "unpause"
      | "users"
      | "withdrawFunds"
      | "withdrawLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPrizes",
    values: [IChild.PrizeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGiveaway",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IChild.PrizeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cronUpkeep",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillGiveawayWinner",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRefreshGiveaway",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillSignUp",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGiveawayURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignUpURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveaways",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSignedUp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshActiveGiveawayStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roundId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdminOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFactoryOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGiveaway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cronUpkeep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillGiveawayWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRefreshGiveaway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillSignUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGiveawayURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignUpURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "giveaways", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSignedUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshActiveGiveawayStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdminOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFactoryOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "AdminOwnershipTransferred(address,address)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "ChildPrizeClaimed(address,uint256,uint256)": EventFragment;
    "CreatorFeeClaimed(uint256)": EventFragment;
    "CreatorOwnershipTransferred(address,address)": EventFragment;
    "CronUpkeepUpdated(uint256,address)": EventFragment;
    "EncodedCronUpdated(uint256,string)": EventFragment;
    "FactoryOwnershipTransferred(address,address)": EventFragment;
    "FailedTransfer(address,uint256)": EventFragment;
    "GamePrizeClaimed(address,uint256,uint256)": EventFragment;
    "GiveawayCreated(uint256,uint256,uint256,uint256)": EventFragment;
    "GiveawayRefreshRequested(uint256,bytes32)": EventFragment;
    "GiveawayRefreshed(uint256,uint256)": EventFragment;
    "GiveawayWinnerRequested(uint256,bytes32)": EventFragment;
    "Paused(address)": EventFragment;
    "PerformUpkeepExecuted(uint256,uint256)": EventFragment;
    "PrizeAdded(uint256,uint256,uint256,uint256,address,uint256)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "SignUpRequested(uint256,bytes32)": EventFragment;
    "SignedUp(uint256,address)": EventFragment;
    "TreasuryFeeClaimed(uint256)": EventFragment;
    "TreasuryFeeClaimedByFactory(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WinnerAdded(uint256,uint256,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildPrizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorFeeClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreatorOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CronUpkeepUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncodedCronUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FactoryOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GamePrizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveawayCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveawayRefreshRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveawayRefreshed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GiveawayWinnerRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformUpkeepExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUpRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFeeClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TreasuryFeeClaimedByFactory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerAdded"): EventFragment;
}

export interface AdminOwnershipTransferredEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type AdminOwnershipTransferredEvent = TypedEvent<
  [string, string],
  AdminOwnershipTransferredEventObject
>;

export type AdminOwnershipTransferredEventFilter =
  TypedEventFilter<AdminOwnershipTransferredEvent>;

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface ChildPrizeClaimedEventObject {
  claimer: string;
  roundId: BigNumber;
  amountClaimed: BigNumber;
}
export type ChildPrizeClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ChildPrizeClaimedEventObject
>;

export type ChildPrizeClaimedEventFilter =
  TypedEventFilter<ChildPrizeClaimedEvent>;

export interface CreatorFeeClaimedEventObject {
  amount: BigNumber;
}
export type CreatorFeeClaimedEvent = TypedEvent<
  [BigNumber],
  CreatorFeeClaimedEventObject
>;

export type CreatorFeeClaimedEventFilter =
  TypedEventFilter<CreatorFeeClaimedEvent>;

export interface CreatorOwnershipTransferredEventObject {
  oldCreator: string;
  newCreator: string;
}
export type CreatorOwnershipTransferredEvent = TypedEvent<
  [string, string],
  CreatorOwnershipTransferredEventObject
>;

export type CreatorOwnershipTransferredEventFilter =
  TypedEventFilter<CreatorOwnershipTransferredEvent>;

export interface CronUpkeepUpdatedEventObject {
  jobId: BigNumber;
  cronUpkeep: string;
}
export type CronUpkeepUpdatedEvent = TypedEvent<
  [BigNumber, string],
  CronUpkeepUpdatedEventObject
>;

export type CronUpkeepUpdatedEventFilter =
  TypedEventFilter<CronUpkeepUpdatedEvent>;

export interface EncodedCronUpdatedEventObject {
  jobId: BigNumber;
  encodedCron: string;
}
export type EncodedCronUpdatedEvent = TypedEvent<
  [BigNumber, string],
  EncodedCronUpdatedEventObject
>;

export type EncodedCronUpdatedEventFilter =
  TypedEventFilter<EncodedCronUpdatedEvent>;

export interface FactoryOwnershipTransferredEventObject {
  oldFactory: string;
  newFactory: string;
}
export type FactoryOwnershipTransferredEvent = TypedEvent<
  [string, string],
  FactoryOwnershipTransferredEventObject
>;

export type FactoryOwnershipTransferredEventFilter =
  TypedEventFilter<FactoryOwnershipTransferredEvent>;

export interface FailedTransferEventObject {
  receiver: string;
  amount: BigNumber;
}
export type FailedTransferEvent = TypedEvent<
  [string, BigNumber],
  FailedTransferEventObject
>;

export type FailedTransferEventFilter = TypedEventFilter<FailedTransferEvent>;

export interface GamePrizeClaimedEventObject {
  claimer: string;
  roundId: BigNumber;
  amountClaimed: BigNumber;
}
export type GamePrizeClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GamePrizeClaimedEventObject
>;

export type GamePrizeClaimedEventFilter =
  TypedEventFilter<GamePrizeClaimedEvent>;

export interface GiveawayCreatedEventObject {
  roundId: BigNumber;
  userId: BigNumber;
  tweetId: BigNumber;
  prizesLength: BigNumber;
}
export type GiveawayCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  GiveawayCreatedEventObject
>;

export type GiveawayCreatedEventFilter = TypedEventFilter<GiveawayCreatedEvent>;

export interface GiveawayRefreshRequestedEventObject {
  userId: BigNumber;
  requestId: string;
}
export type GiveawayRefreshRequestedEvent = TypedEvent<
  [BigNumber, string],
  GiveawayRefreshRequestedEventObject
>;

export type GiveawayRefreshRequestedEventFilter =
  TypedEventFilter<GiveawayRefreshRequestedEvent>;

export interface GiveawayRefreshedEventObject {
  giveawayId: BigNumber;
  timestamp: BigNumber;
}
export type GiveawayRefreshedEvent = TypedEvent<
  [BigNumber, BigNumber],
  GiveawayRefreshedEventObject
>;

export type GiveawayRefreshedEventFilter =
  TypedEventFilter<GiveawayRefreshedEvent>;

export interface GiveawayWinnerRequestedEventObject {
  giveawayId: BigNumber;
  requestId: string;
}
export type GiveawayWinnerRequestedEvent = TypedEvent<
  [BigNumber, string],
  GiveawayWinnerRequestedEventObject
>;

export type GiveawayWinnerRequestedEventFilter =
  TypedEventFilter<GiveawayWinnerRequestedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PerformUpkeepExecutedEventObject {
  giveawayId: BigNumber;
  timestamp: BigNumber;
}
export type PerformUpkeepExecutedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PerformUpkeepExecutedEventObject
>;

export type PerformUpkeepExecutedEventFilter =
  TypedEventFilter<PerformUpkeepExecutedEvent>;

export interface PrizeAddedEventObject {
  roundId: BigNumber;
  position: BigNumber;
  amount: BigNumber;
  standard: BigNumber;
  contractAddress: string;
  tokenId: BigNumber;
}
export type PrizeAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  PrizeAddedEventObject
>;

export type PrizeAddedEventFilter = TypedEventFilter<PrizeAddedEvent>;

export interface ReceivedEventObject {
  sender: string;
  amount: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface SignUpRequestedEventObject {
  userId: BigNumber;
  requestId: string;
}
export type SignUpRequestedEvent = TypedEvent<
  [BigNumber, string],
  SignUpRequestedEventObject
>;

export type SignUpRequestedEventFilter = TypedEventFilter<SignUpRequestedEvent>;

export interface SignedUpEventObject {
  userId: BigNumber;
  userAddress: string;
}
export type SignedUpEvent = TypedEvent<
  [BigNumber, string],
  SignedUpEventObject
>;

export type SignedUpEventFilter = TypedEventFilter<SignedUpEvent>;

export interface TreasuryFeeClaimedEventObject {
  amount: BigNumber;
}
export type TreasuryFeeClaimedEvent = TypedEvent<
  [BigNumber],
  TreasuryFeeClaimedEventObject
>;

export type TreasuryFeeClaimedEventFilter =
  TypedEventFilter<TreasuryFeeClaimedEvent>;

export interface TreasuryFeeClaimedByFactoryEventObject {
  amount: BigNumber;
}
export type TreasuryFeeClaimedByFactoryEvent = TypedEvent<
  [BigNumber],
  TreasuryFeeClaimedByFactoryEventObject
>;

export type TreasuryFeeClaimedByFactoryEventFilter =
  TypedEventFilter<TreasuryFeeClaimedByFactoryEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WinnerAddedEventObject {
  giveawayId: BigNumber;
  position: BigNumber;
  winnerId: BigNumber;
  contractAddress: string;
  amount: BigNumber;
  tokenId: BigNumber;
}
export type WinnerAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
  WinnerAddedEventObject
>;

export type WinnerAddedEventFilter = TypedEventFilter<WinnerAddedEvent>;

export interface GiveawayV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GiveawayV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { _upkeepNeeded: boolean; _payload: string }
    >;

    claimPrize(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGiveaway(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _userId: PromiseOrValue<BigNumberish>,
      _tweetId: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _retweetMaxCount: PromiseOrValue<BigNumberish>,
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cronUpkeep(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fulfillGiveawayWinner(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillRefreshGiveaway(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _retweetCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillSignUp(
      _requestId: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BigNumberish>,
      _isValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGiveawayURI(
      _giveawayId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _giveawayURI: string }>;

    getPrizes(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IChild.PrizeStructOutput[]] & { childPrizes: IChild.PrizeStructOutput[] }
    >;

    getSignUpURI(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _signUpURI: string }>;

    getWinners(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IChild.WinnerStructOutput[]] & {
        childWinners: IChild.WinnerStructOutput[];
      }
    >;

    giveaways(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        name: string;
        image: string;
        creator: string;
        userId: BigNumber;
        tweetId: BigNumber;
        endTimestamp: BigNumber;
        retweetCount: BigNumber;
        retweetMaxCount: BigNumber;
        isEnded: boolean;
      }
    >;

    isSignedUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performUpkeep(
      _performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refreshActiveGiveawayStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestBaseURI(overrides?: CallOverrides): Promise<[string]>;

    roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addPrizes(
    _prizes: IChild.PrizeStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(
    _requestId: PromiseOrValue<BytesLike>,
    _payment: PromiseOrValue<BigNumberish>,
    _callbackFunctionId: PromiseOrValue<BytesLike>,
    _expiration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { _upkeepNeeded: boolean; _payload: string }>;

  claimPrize(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTreasuryFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGiveaway(
    _name: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _userId: PromiseOrValue<BigNumberish>,
    _tweetId: PromiseOrValue<BigNumberish>,
    _endTimestamp: PromiseOrValue<BigNumberish>,
    _retweetMaxCount: PromiseOrValue<BigNumberish>,
    _prizes: IChild.PrizeStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cronUpkeep(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  fulfillGiveawayWinner(
    _requestId: PromiseOrValue<BytesLike>,
    _giveawayId: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillRefreshGiveaway(
    _requestId: PromiseOrValue<BytesLike>,
    _giveawayId: PromiseOrValue<BigNumberish>,
    _retweetCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillSignUp(
    _requestId: PromiseOrValue<BytesLike>,
    _userId: PromiseOrValue<BigNumberish>,
    _isValidate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGiveawayURI(
    _giveawayId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrizes(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IChild.PrizeStructOutput[]>;

  getSignUpURI(
    _userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWinners(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IChild.WinnerStructOutput[]>;

  giveaways(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      name: string;
      image: string;
      creator: string;
      userId: BigNumber;
      tweetId: BigNumber;
      endTimestamp: BigNumber;
      retweetCount: BigNumber;
      retweetMaxCount: BigNumber;
      isEnded: boolean;
    }
  >;

  isSignedUp(
    _userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  jobId(overrides?: CallOverrides): Promise<string>;

  keeper(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performUpkeep(
    _performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refreshActiveGiveawayStatus(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestBaseURI(overrides?: CallOverrides): Promise<string>;

  roundId(overrides?: CallOverrides): Promise<BigNumber>;

  setTreasuryFee(
    _treasuryFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signUp(
    _userId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAdminOwnership(
    _adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFactoryOwnership(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawFunds(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUpkeep(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { _upkeepNeeded: boolean; _payload: string }
    >;

    claimPrize(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTreasuryFee(overrides?: CallOverrides): Promise<void>;

    createGiveaway(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _userId: PromiseOrValue<BigNumberish>,
      _tweetId: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _retweetMaxCount: PromiseOrValue<BigNumberish>,
      _prizes: IChild.PrizeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    cronUpkeep(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    fulfillGiveawayWinner(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillRefreshGiveaway(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _retweetCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillSignUp(
      _requestId: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BigNumberish>,
      _isValidate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getGiveawayURI(
      _giveawayId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrizes(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IChild.PrizeStructOutput[]>;

    getSignUpURI(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWinners(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IChild.WinnerStructOutput[]>;

    giveaways(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        name: string;
        image: string;
        creator: string;
        userId: BigNumber;
        tweetId: BigNumber;
        endTimestamp: BigNumber;
        retweetCount: BigNumber;
        retweetMaxCount: BigNumber;
        isEnded: boolean;
      }
    >;

    isSignedUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jobId(overrides?: CallOverrides): Promise<string>;

    keeper(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performUpkeep(
      _performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshActiveGiveawayStatus(overrides?: CallOverrides): Promise<void>;

    requestBaseURI(overrides?: CallOverrides): Promise<string>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminOwnershipTransferred(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminOwnershipTransferredEventFilter;
    AdminOwnershipTransferred(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminOwnershipTransferredEventFilter;

    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "ChildPrizeClaimed(address,uint256,uint256)"(
      claimer?: null,
      roundId?: null,
      amountClaimed?: null
    ): ChildPrizeClaimedEventFilter;
    ChildPrizeClaimed(
      claimer?: null,
      roundId?: null,
      amountClaimed?: null
    ): ChildPrizeClaimedEventFilter;

    "CreatorFeeClaimed(uint256)"(amount?: null): CreatorFeeClaimedEventFilter;
    CreatorFeeClaimed(amount?: null): CreatorFeeClaimedEventFilter;

    "CreatorOwnershipTransferred(address,address)"(
      oldCreator?: null,
      newCreator?: null
    ): CreatorOwnershipTransferredEventFilter;
    CreatorOwnershipTransferred(
      oldCreator?: null,
      newCreator?: null
    ): CreatorOwnershipTransferredEventFilter;

    "CronUpkeepUpdated(uint256,address)"(
      jobId?: null,
      cronUpkeep?: null
    ): CronUpkeepUpdatedEventFilter;
    CronUpkeepUpdated(
      jobId?: null,
      cronUpkeep?: null
    ): CronUpkeepUpdatedEventFilter;

    "EncodedCronUpdated(uint256,string)"(
      jobId?: null,
      encodedCron?: null
    ): EncodedCronUpdatedEventFilter;
    EncodedCronUpdated(
      jobId?: null,
      encodedCron?: null
    ): EncodedCronUpdatedEventFilter;

    "FactoryOwnershipTransferred(address,address)"(
      oldFactory?: null,
      newFactory?: null
    ): FactoryOwnershipTransferredEventFilter;
    FactoryOwnershipTransferred(
      oldFactory?: null,
      newFactory?: null
    ): FactoryOwnershipTransferredEventFilter;

    "FailedTransfer(address,uint256)"(
      receiver?: null,
      amount?: null
    ): FailedTransferEventFilter;
    FailedTransfer(receiver?: null, amount?: null): FailedTransferEventFilter;

    "GamePrizeClaimed(address,uint256,uint256)"(
      claimer?: null,
      roundId?: null,
      amountClaimed?: null
    ): GamePrizeClaimedEventFilter;
    GamePrizeClaimed(
      claimer?: null,
      roundId?: null,
      amountClaimed?: null
    ): GamePrizeClaimedEventFilter;

    "GiveawayCreated(uint256,uint256,uint256,uint256)"(
      roundId?: null,
      userId?: null,
      tweetId?: null,
      prizesLength?: null
    ): GiveawayCreatedEventFilter;
    GiveawayCreated(
      roundId?: null,
      userId?: null,
      tweetId?: null,
      prizesLength?: null
    ): GiveawayCreatedEventFilter;

    "GiveawayRefreshRequested(uint256,bytes32)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): GiveawayRefreshRequestedEventFilter;
    GiveawayRefreshRequested(
      userId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): GiveawayRefreshRequestedEventFilter;

    "GiveawayRefreshed(uint256,uint256)"(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): GiveawayRefreshedEventFilter;
    GiveawayRefreshed(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): GiveawayRefreshedEventFilter;

    "GiveawayWinnerRequested(uint256,bytes32)"(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): GiveawayWinnerRequestedEventFilter;
    GiveawayWinnerRequested(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): GiveawayWinnerRequestedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PerformUpkeepExecuted(uint256,uint256)"(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): PerformUpkeepExecutedEventFilter;
    PerformUpkeepExecuted(
      giveawayId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): PerformUpkeepExecutedEventFilter;

    "PrizeAdded(uint256,uint256,uint256,uint256,address,uint256)"(
      roundId?: null,
      position?: null,
      amount?: null,
      standard?: null,
      contractAddress?: null,
      tokenId?: null
    ): PrizeAddedEventFilter;
    PrizeAdded(
      roundId?: null,
      position?: null,
      amount?: null,
      standard?: null,
      contractAddress?: null,
      tokenId?: null
    ): PrizeAddedEventFilter;

    "Received(address,uint256)"(
      sender?: null,
      amount?: null
    ): ReceivedEventFilter;
    Received(sender?: null, amount?: null): ReceivedEventFilter;

    "SignUpRequested(uint256,bytes32)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): SignUpRequestedEventFilter;
    SignUpRequested(
      userId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BytesLike> | null
    ): SignUpRequestedEventFilter;

    "SignedUp(uint256,address)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      userAddress?: null
    ): SignedUpEventFilter;
    SignedUp(
      userId?: PromiseOrValue<BigNumberish> | null,
      userAddress?: null
    ): SignedUpEventFilter;

    "TreasuryFeeClaimed(uint256)"(amount?: null): TreasuryFeeClaimedEventFilter;
    TreasuryFeeClaimed(amount?: null): TreasuryFeeClaimedEventFilter;

    "TreasuryFeeClaimedByFactory(uint256)"(
      amount?: null
    ): TreasuryFeeClaimedByFactoryEventFilter;
    TreasuryFeeClaimedByFactory(
      amount?: null
    ): TreasuryFeeClaimedByFactoryEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WinnerAdded(uint256,uint256,uint256,address,uint256,uint256)"(
      giveawayId?: null,
      position?: null,
      winnerId?: null,
      contractAddress?: null,
      amount?: null,
      tokenId?: null
    ): WinnerAddedEventFilter;
    WinnerAdded(
      giveawayId?: null,
      position?: null,
      winnerId?: null,
      contractAddress?: null,
      amount?: null,
      tokenId?: null
    ): WinnerAddedEventFilter;
  };

  estimateGas: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPrize(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGiveaway(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _userId: PromiseOrValue<BigNumberish>,
      _tweetId: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _retweetMaxCount: PromiseOrValue<BigNumberish>,
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cronUpkeep(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillGiveawayWinner(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillRefreshGiveaway(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _retweetCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillSignUp(
      _requestId: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BigNumberish>,
      _isValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGiveawayURI(
      _giveawayId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizes(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignUpURI(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinners(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    giveaways(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSignedUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      _performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refreshActiveGiveawayStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(
      _requestId: PromiseOrValue<BytesLike>,
      _payment: PromiseOrValue<BigNumberish>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPrize(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGiveaway(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _userId: PromiseOrValue<BigNumberish>,
      _tweetId: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _retweetMaxCount: PromiseOrValue<BigNumberish>,
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cronUpkeep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillGiveawayWinner(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillRefreshGiveaway(
      _requestId: PromiseOrValue<BytesLike>,
      _giveawayId: PromiseOrValue<BigNumberish>,
      _retweetCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillSignUp(
      _requestId: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BigNumberish>,
      _isValidate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGiveawayURI(
      _giveawayId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizes(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignUpURI(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinners(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giveaways(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignedUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      _performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refreshActiveGiveawayStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signUp(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
