/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IChild {
  export type PrizeStruct = {
    position: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    standard: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type PrizeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    position: BigNumber;
    amount: BigNumber;
    standard: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
  };

  export type WinnerStruct = {
    epoch: PromiseOrValue<BigNumberish>;
    userId: PromiseOrValue<BigNumberish>;
    playerAddress: PromiseOrValue<string>;
    amountWon: PromiseOrValue<BigNumberish>;
    position: PromiseOrValue<BigNumberish>;
    standard: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    prizeClaimed: PromiseOrValue<boolean>;
  };

  export type WinnerStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean
  ] & {
    epoch: BigNumber;
    userId: BigNumber;
    playerAddress: string;
    amountWon: BigNumber;
    position: BigNumber;
    standard: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
    prizeClaimed: boolean;
  };
}

export declare namespace IGame {
  export type GameDataStruct = {
    gameId: PromiseOrValue<BigNumberish>;
    versionId: PromiseOrValue<BigNumberish>;
    epoch: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<BytesLike>;
    playerAddressesCount: PromiseOrValue<BigNumberish>;
    remainingPlayersCount: PromiseOrValue<BigNumberish>;
    maxPlayers: PromiseOrValue<BigNumberish>;
    registrationAmount: PromiseOrValue<BigNumberish>;
    playTimeRange: PromiseOrValue<BigNumberish>;
    treasuryFee: PromiseOrValue<BigNumberish>;
    creatorFee: PromiseOrValue<BigNumberish>;
    isPaused: PromiseOrValue<boolean>;
    isInProgress: PromiseOrValue<boolean>;
    creator: PromiseOrValue<string>;
    admin: PromiseOrValue<string>;
    encodedCron: PromiseOrValue<string>;
  };

  export type GameDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    string,
    string,
    string
  ] & {
    gameId: BigNumber;
    versionId: BigNumber;
    epoch: BigNumber;
    name: string;
    playerAddressesCount: BigNumber;
    remainingPlayersCount: BigNumber;
    maxPlayers: BigNumber;
    registrationAmount: BigNumber;
    playTimeRange: BigNumber;
    treasuryFee: BigNumber;
    creatorFee: BigNumber;
    isPaused: boolean;
    isInProgress: boolean;
    creator: string;
    admin: string;
    encodedCron: string;
  };

  export type PlayerStruct = {
    playerAddress: PromiseOrValue<string>;
    roundRangeLowerLimit: PromiseOrValue<BigNumberish>;
    roundRangeUpperLimit: PromiseOrValue<BigNumberish>;
    hasPlayedRound: PromiseOrValue<boolean>;
    roundCount: PromiseOrValue<BigNumberish>;
    position: PromiseOrValue<BigNumberish>;
    hasLost: PromiseOrValue<boolean>;
    isSplitOk: PromiseOrValue<boolean>;
  };

  export type PlayerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    playerAddress: string;
    roundRangeLowerLimit: BigNumber;
    roundRangeUpperLimit: BigNumber;
    hasPlayedRound: boolean;
    roundCount: BigNumber;
    position: BigNumber;
    hasLost: boolean;
    isSplitOk: boolean;
  };

  export type InitializationStruct = {
    owner: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    cronUpkeep: PromiseOrValue<string>;
    keeper: PromiseOrValue<string>;
    name: PromiseOrValue<BytesLike>;
    version: PromiseOrValue<BigNumberish>;
    gameId: PromiseOrValue<BigNumberish>;
    playTimeRange: PromiseOrValue<BigNumberish>;
    maxPlayers: PromiseOrValue<BigNumberish>;
    registrationAmount: PromiseOrValue<BigNumberish>;
    treasuryFee: PromiseOrValue<BigNumberish>;
    creatorFee: PromiseOrValue<BigNumberish>;
    encodedCron: PromiseOrValue<string>;
    prizes: IChild.PrizeStruct[];
  };

  export type InitializationStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    IChild.PrizeStructOutput[]
  ] & {
    owner: string;
    creator: string;
    cronUpkeep: string;
    keeper: string;
    name: string;
    version: BigNumber;
    gameId: BigNumber;
    playTimeRange: BigNumber;
    maxPlayers: BigNumber;
    registrationAmount: BigNumber;
    treasuryFee: BigNumber;
    creatorFee: BigNumber;
    encodedCron: string;
    prizes: IChild.PrizeStructOutput[];
  };

  export type UpdateGameDataStruct = {
    name: PromiseOrValue<BytesLike>;
    maxPlayers: PromiseOrValue<BigNumberish>;
    registrationAmount: PromiseOrValue<BigNumberish>;
    playTimeRange: PromiseOrValue<BigNumberish>;
    treasuryFee: PromiseOrValue<BigNumberish>;
    creatorFee: PromiseOrValue<BigNumberish>;
    encodedCron: PromiseOrValue<string>;
  };

  export type UpdateGameDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    name: string;
    maxPlayers: BigNumber;
    registrationAmount: BigNumber;
    playTimeRange: BigNumber;
    treasuryFee: BigNumber;
    creatorFee: BigNumber;
    encodedCron: string;
  };
}

export interface IGameInterface extends utils.Interface {
  functions: {
    "addPrizes((uint256,uint256,uint256,address,uint256)[])": FunctionFragment;
    "addTokenERC20(address)": FunctionFragment;
    "addTokenERC721(address)": FunctionFragment;
    "claimCreatorFee()": FunctionFragment;
    "claimPrize(uint256)": FunctionFragment;
    "claimTreasuryFee()": FunctionFragment;
    "getERC721TokenIds(address,address)": FunctionFragment;
    "getGameData()": FunctionFragment;
    "getPlayer(address)": FunctionFragment;
    "getPlayerAddresses()": FunctionFragment;
    "getPrizes(uint256)": FunctionFragment;
    "getRemainingPlayersCount()": FunctionFragment;
    "getWinners(uint256)": FunctionFragment;
    "initialize((address,address,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,(uint256,uint256,uint256,address,uint256)[]))": FunctionFragment;
    "isAllPlayersSplitOk()": FunctionFragment;
    "isGameAllPrizesStandard()": FunctionFragment;
    "isGamePayable()": FunctionFragment;
    "pause()": FunctionFragment;
    "playRound()": FunctionFragment;
    "registerForGame()": FunctionFragment;
    "removeTokenERC20(address)": FunctionFragment;
    "removeTokenERC721(address)": FunctionFragment;
    "setCreatorFee(uint256)": FunctionFragment;
    "setCronUpkeep(address)": FunctionFragment;
    "setEncodedCron(string)": FunctionFragment;
    "setGameData((bytes32,uint256,uint256,uint256,uint256,uint256,string))": FunctionFragment;
    "setMaxPlayers(uint256)": FunctionFragment;
    "setName(bytes32)": FunctionFragment;
    "setPlayTimeRange(uint256)": FunctionFragment;
    "setTreasuryFee(uint256)": FunctionFragment;
    "startGame()": FunctionFragment;
    "transferAdminOwnership(address)": FunctionFragment;
    "transferCreatorOwnership(address)": FunctionFragment;
    "transferFactoryOwnership(address)": FunctionFragment;
    "triggerDailyCheckpoint()": FunctionFragment;
    "unpause()": FunctionFragment;
    "voteToSplitPot()": FunctionFragment;
    "withdrawERC20(address,address)": FunctionFragment;
    "withdrawERC721(address,uint256,address)": FunctionFragment;
    "withdrawFunds(address)": FunctionFragment;
    "withdrawNative(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPrizes"
      | "addTokenERC20"
      | "addTokenERC721"
      | "claimCreatorFee"
      | "claimPrize"
      | "claimTreasuryFee"
      | "getERC721TokenIds"
      | "getGameData"
      | "getPlayer"
      | "getPlayerAddresses"
      | "getPrizes"
      | "getRemainingPlayersCount"
      | "getWinners"
      | "initialize"
      | "isAllPlayersSplitOk"
      | "isGameAllPrizesStandard"
      | "isGamePayable"
      | "pause"
      | "playRound"
      | "registerForGame"
      | "removeTokenERC20"
      | "removeTokenERC721"
      | "setCreatorFee"
      | "setCronUpkeep"
      | "setEncodedCron"
      | "setGameData"
      | "setMaxPlayers"
      | "setName"
      | "setPlayTimeRange"
      | "setTreasuryFee"
      | "startGame"
      | "transferAdminOwnership"
      | "transferCreatorOwnership"
      | "transferFactoryOwnership"
      | "triggerDailyCheckpoint"
      | "unpause"
      | "voteToSplitPot"
      | "withdrawERC20"
      | "withdrawERC721"
      | "withdrawFunds"
      | "withdrawNative"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPrizes",
    values: [IChild.PrizeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenERC721",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCreatorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721TokenIds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingPlayersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IGame.InitializationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllPlayersSplitOk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameAllPrizesStandard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGamePayable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "playRound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerForGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenERC721",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCronUpkeep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEncodedCron",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameData",
    values: [IGame.UpdateGameDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayTimeRange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAdminOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCreatorOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFactoryOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerDailyCheckpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteToSplitPot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721TokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingPlayersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllPlayersSplitOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameAllPrizesStandard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGamePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerForGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCronUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEncodedCron",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlayTimeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdminOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCreatorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFactoryOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerDailyCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteToSplitPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;

  events: {
    "AdminOwnershipTransferred(address,address)": EventFragment;
    "ChildPrizeClaimed(address,uint256,uint256)": EventFragment;
    "CreatorFeeClaimed(uint256)": EventFragment;
    "CreatorOwnershipTransferred(address,address)": EventFragment;
    "CronUpkeepUpdated(uint256,address)": EventFragment;
    "EncodedCronUpdated(uint256,string)": EventFragment;
    "FactoryOwnershipTransferred(address,address)": EventFragment;
    "FailedTransfer(address,uint256)": EventFragment;
    "GameLost(uint256,address,uint256)": EventFragment;
    "GamePrizeClaimed(address,uint256,uint256)": EventFragment;
    "GameSplitted(uint256,uint256,uint256)": EventFragment;
    "GameWon(uint256,uint256,address,uint256)": EventFragment;
    "PlayedRound(address)": EventFragment;
    "PrizeAdded(uint256,uint256,uint256,uint256,address,uint256)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "RegisteredForGame(address,uint256)": EventFragment;
    "ResetGame(uint256,uint256)": EventFragment;
    "StartedGame(uint256,uint256)": EventFragment;
    "TreasuryFeeClaimed(uint256)": EventFragment;
    "TreasuryFeeClaimedByFactory(uint256)": EventFragment;
    "TriggeredDailyCheckpoint(uint256,address,uint256)": EventFragment;
    "VoteToSplitPot(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildPrizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorFeeClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreatorOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CronUpkeepUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncodedCronUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FactoryOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameLost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GamePrizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameSplitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameWon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayedRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredForGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartedGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFeeClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TreasuryFeeClaimedByFactory"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredDailyCheckpoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteToSplitPot"): EventFragment;
}

export interface AdminOwnershipTransferredEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type AdminOwnershipTransferredEvent = TypedEvent<
  [string, string],
  AdminOwnershipTransferredEventObject
>;

export type AdminOwnershipTransferredEventFilter =
  TypedEventFilter<AdminOwnershipTransferredEvent>;

export interface ChildPrizeClaimedEventObject {
  claimer: string;
  epoch: BigNumber;
  amountClaimed: BigNumber;
}
export type ChildPrizeClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ChildPrizeClaimedEventObject
>;

export type ChildPrizeClaimedEventFilter =
  TypedEventFilter<ChildPrizeClaimedEvent>;

export interface CreatorFeeClaimedEventObject {
  amount: BigNumber;
}
export type CreatorFeeClaimedEvent = TypedEvent<
  [BigNumber],
  CreatorFeeClaimedEventObject
>;

export type CreatorFeeClaimedEventFilter =
  TypedEventFilter<CreatorFeeClaimedEvent>;

export interface CreatorOwnershipTransferredEventObject {
  oldCreator: string;
  newCreator: string;
}
export type CreatorOwnershipTransferredEvent = TypedEvent<
  [string, string],
  CreatorOwnershipTransferredEventObject
>;

export type CreatorOwnershipTransferredEventFilter =
  TypedEventFilter<CreatorOwnershipTransferredEvent>;

export interface CronUpkeepUpdatedEventObject {
  jobId: BigNumber;
  cronUpkeep: string;
}
export type CronUpkeepUpdatedEvent = TypedEvent<
  [BigNumber, string],
  CronUpkeepUpdatedEventObject
>;

export type CronUpkeepUpdatedEventFilter =
  TypedEventFilter<CronUpkeepUpdatedEvent>;

export interface EncodedCronUpdatedEventObject {
  jobId: BigNumber;
  encodedCron: string;
}
export type EncodedCronUpdatedEvent = TypedEvent<
  [BigNumber, string],
  EncodedCronUpdatedEventObject
>;

export type EncodedCronUpdatedEventFilter =
  TypedEventFilter<EncodedCronUpdatedEvent>;

export interface FactoryOwnershipTransferredEventObject {
  oldFactory: string;
  newFactory: string;
}
export type FactoryOwnershipTransferredEvent = TypedEvent<
  [string, string],
  FactoryOwnershipTransferredEventObject
>;

export type FactoryOwnershipTransferredEventFilter =
  TypedEventFilter<FactoryOwnershipTransferredEvent>;

export interface FailedTransferEventObject {
  receiver: string;
  amount: BigNumber;
}
export type FailedTransferEvent = TypedEvent<
  [string, BigNumber],
  FailedTransferEventObject
>;

export type FailedTransferEventFilter = TypedEventFilter<FailedTransferEvent>;

export interface GameLostEventObject {
  epoch: BigNumber;
  playerAddress: string;
  roundCount: BigNumber;
}
export type GameLostEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GameLostEventObject
>;

export type GameLostEventFilter = TypedEventFilter<GameLostEvent>;

export interface GamePrizeClaimedEventObject {
  claimer: string;
  epoch: BigNumber;
  amountClaimed: BigNumber;
}
export type GamePrizeClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GamePrizeClaimedEventObject
>;

export type GamePrizeClaimedEventFilter =
  TypedEventFilter<GamePrizeClaimedEvent>;

export interface GameSplittedEventObject {
  epoch: BigNumber;
  remainingPlayersCount: BigNumber;
  amountWon: BigNumber;
}
export type GameSplittedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GameSplittedEventObject
>;

export type GameSplittedEventFilter = TypedEventFilter<GameSplittedEvent>;

export interface GameWonEventObject {
  epoch: BigNumber;
  winnersCounter: BigNumber;
  playerAddress: string;
  amountWon: BigNumber;
}
export type GameWonEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  GameWonEventObject
>;

export type GameWonEventFilter = TypedEventFilter<GameWonEvent>;

export interface PlayedRoundEventObject {
  playerAddress: string;
}
export type PlayedRoundEvent = TypedEvent<[string], PlayedRoundEventObject>;

export type PlayedRoundEventFilter = TypedEventFilter<PlayedRoundEvent>;

export interface PrizeAddedEventObject {
  epoch: BigNumber;
  position: BigNumber;
  amount: BigNumber;
  standard: BigNumber;
  contractAddress: string;
  tokenId: BigNumber;
}
export type PrizeAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  PrizeAddedEventObject
>;

export type PrizeAddedEventFilter = TypedEventFilter<PrizeAddedEvent>;

export interface ReceivedEventObject {
  sender: string;
  amount: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface RegisteredForGameEventObject {
  playerAddress: string;
  playersCount: BigNumber;
}
export type RegisteredForGameEvent = TypedEvent<
  [string, BigNumber],
  RegisteredForGameEventObject
>;

export type RegisteredForGameEventFilter =
  TypedEventFilter<RegisteredForGameEvent>;

export interface ResetGameEventObject {
  timelock: BigNumber;
  resetId: BigNumber;
}
export type ResetGameEvent = TypedEvent<
  [BigNumber, BigNumber],
  ResetGameEventObject
>;

export type ResetGameEventFilter = TypedEventFilter<ResetGameEvent>;

export interface StartedGameEventObject {
  timelock: BigNumber;
  playersCount: BigNumber;
}
export type StartedGameEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartedGameEventObject
>;

export type StartedGameEventFilter = TypedEventFilter<StartedGameEvent>;

export interface TreasuryFeeClaimedEventObject {
  amount: BigNumber;
}
export type TreasuryFeeClaimedEvent = TypedEvent<
  [BigNumber],
  TreasuryFeeClaimedEventObject
>;

export type TreasuryFeeClaimedEventFilter =
  TypedEventFilter<TreasuryFeeClaimedEvent>;

export interface TreasuryFeeClaimedByFactoryEventObject {
  amount: BigNumber;
}
export type TreasuryFeeClaimedByFactoryEvent = TypedEvent<
  [BigNumber],
  TreasuryFeeClaimedByFactoryEventObject
>;

export type TreasuryFeeClaimedByFactoryEventFilter =
  TypedEventFilter<TreasuryFeeClaimedByFactoryEvent>;

export interface TriggeredDailyCheckpointEventObject {
  epoch: BigNumber;
  emmiter: string;
  timestamp: BigNumber;
}
export type TriggeredDailyCheckpointEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TriggeredDailyCheckpointEventObject
>;

export type TriggeredDailyCheckpointEventFilter =
  TypedEventFilter<TriggeredDailyCheckpointEvent>;

export interface VoteToSplitPotEventObject {
  epoch: BigNumber;
  playerAddress: string;
}
export type VoteToSplitPotEvent = TypedEvent<
  [BigNumber, string],
  VoteToSplitPotEventObject
>;

export type VoteToSplitPotEventFilter = TypedEventFilter<VoteToSplitPotEvent>;

export interface IGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCreatorFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getERC721TokenIds(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getGameData(
      overrides?: CallOverrides
    ): Promise<
      [IGame.GameDataStructOutput] & { gameData: IGame.GameDataStructOutput }
    >;

    getPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IGame.PlayerStructOutput] & { gamePlayer: IGame.PlayerStructOutput }
    >;

    getPlayerAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { gamePlayerAddresses: string[] }>;

    getPrizes(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IChild.PrizeStructOutput[]] & { childPrizes: IChild.PrizeStructOutput[] }
    >;

    getRemainingPlayersCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingPlayersCount: BigNumber }>;

    getWinners(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IChild.WinnerStructOutput[]] & {
        childWinners: IChild.WinnerStructOutput[];
      }
    >;

    initialize(
      _initialization: IGame.InitializationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAllPlayersSplitOk(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSplitOk: boolean }>;

    isGameAllPrizesStandard(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isStandard: boolean }>;

    isGamePayable(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPayable: boolean }>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerForGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreatorFee(
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCronUpkeep(
      _cronUpkeep: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEncodedCron(
      _encodedCron: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameData(
      _updateGameData: IGame.UpdateGameDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPlayers(
      _maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlayTimeRange(
      _playTimeRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferCreatorOwnership(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerDailyCheckpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteToSplitPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _contractAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPrizes(
    _prizes: IChild.PrizeStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenERC20(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenERC721(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCreatorFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTreasuryFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getERC721TokenIds(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getGameData(overrides?: CallOverrides): Promise<IGame.GameDataStructOutput>;

  getPlayer(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IGame.PlayerStructOutput>;

  getPlayerAddresses(overrides?: CallOverrides): Promise<string[]>;

  getPrizes(
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IChild.PrizeStructOutput[]>;

  getRemainingPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getWinners(
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IChild.WinnerStructOutput[]>;

  initialize(
    _initialization: IGame.InitializationStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAllPlayersSplitOk(overrides?: CallOverrides): Promise<boolean>;

  isGameAllPrizesStandard(overrides?: CallOverrides): Promise<boolean>;

  isGamePayable(overrides?: CallOverrides): Promise<boolean>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playRound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerForGame(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTokenERC20(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTokenERC721(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreatorFee(
    _creatorFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCronUpkeep(
    _cronUpkeep: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEncodedCron(
    _encodedCron: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameData(
    _updateGameData: IGame.UpdateGameDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPlayers(
    _maxPlayers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    _name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlayTimeRange(
    _playTimeRange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryFee(
    _treasuryFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAdminOwnership(
    _adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferCreatorOwnership(
    _creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFactoryOwnership(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerDailyCheckpoint(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteToSplitPot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _contractAddress: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCreatorFee(overrides?: CallOverrides): Promise<void>;

    claimPrize(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTreasuryFee(overrides?: CallOverrides): Promise<void>;

    getERC721TokenIds(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGameData(overrides?: CallOverrides): Promise<IGame.GameDataStructOutput>;

    getPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IGame.PlayerStructOutput>;

    getPlayerAddresses(overrides?: CallOverrides): Promise<string[]>;

    getPrizes(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IChild.PrizeStructOutput[]>;

    getRemainingPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getWinners(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IChild.WinnerStructOutput[]>;

    initialize(
      _initialization: IGame.InitializationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllPlayersSplitOk(overrides?: CallOverrides): Promise<boolean>;

    isGameAllPrizesStandard(overrides?: CallOverrides): Promise<boolean>;

    isGamePayable(overrides?: CallOverrides): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    playRound(overrides?: CallOverrides): Promise<void>;

    registerForGame(overrides?: CallOverrides): Promise<void>;

    removeTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorFee(
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCronUpkeep(
      _cronUpkeep: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEncodedCron(
      _encodedCron: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameData(
      _updateGameData: IGame.UpdateGameDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPlayers(
      _maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayTimeRange(
      _playTimeRange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(overrides?: CallOverrides): Promise<void>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCreatorOwnership(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerDailyCheckpoint(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    voteToSplitPot(overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      _contractAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminOwnershipTransferred(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminOwnershipTransferredEventFilter;
    AdminOwnershipTransferred(
      oldAdmin?: null,
      newAdmin?: null
    ): AdminOwnershipTransferredEventFilter;

    "ChildPrizeClaimed(address,uint256,uint256)"(
      claimer?: null,
      epoch?: null,
      amountClaimed?: null
    ): ChildPrizeClaimedEventFilter;
    ChildPrizeClaimed(
      claimer?: null,
      epoch?: null,
      amountClaimed?: null
    ): ChildPrizeClaimedEventFilter;

    "CreatorFeeClaimed(uint256)"(amount?: null): CreatorFeeClaimedEventFilter;
    CreatorFeeClaimed(amount?: null): CreatorFeeClaimedEventFilter;

    "CreatorOwnershipTransferred(address,address)"(
      oldCreator?: null,
      newCreator?: null
    ): CreatorOwnershipTransferredEventFilter;
    CreatorOwnershipTransferred(
      oldCreator?: null,
      newCreator?: null
    ): CreatorOwnershipTransferredEventFilter;

    "CronUpkeepUpdated(uint256,address)"(
      jobId?: null,
      cronUpkeep?: null
    ): CronUpkeepUpdatedEventFilter;
    CronUpkeepUpdated(
      jobId?: null,
      cronUpkeep?: null
    ): CronUpkeepUpdatedEventFilter;

    "EncodedCronUpdated(uint256,string)"(
      jobId?: null,
      encodedCron?: null
    ): EncodedCronUpdatedEventFilter;
    EncodedCronUpdated(
      jobId?: null,
      encodedCron?: null
    ): EncodedCronUpdatedEventFilter;

    "FactoryOwnershipTransferred(address,address)"(
      oldFactory?: null,
      newFactory?: null
    ): FactoryOwnershipTransferredEventFilter;
    FactoryOwnershipTransferred(
      oldFactory?: null,
      newFactory?: null
    ): FactoryOwnershipTransferredEventFilter;

    "FailedTransfer(address,uint256)"(
      receiver?: null,
      amount?: null
    ): FailedTransferEventFilter;
    FailedTransfer(receiver?: null, amount?: null): FailedTransferEventFilter;

    "GameLost(uint256,address,uint256)"(
      epoch?: null,
      playerAddress?: null,
      roundCount?: null
    ): GameLostEventFilter;
    GameLost(
      epoch?: null,
      playerAddress?: null,
      roundCount?: null
    ): GameLostEventFilter;

    "GamePrizeClaimed(address,uint256,uint256)"(
      claimer?: null,
      epoch?: null,
      amountClaimed?: null
    ): GamePrizeClaimedEventFilter;
    GamePrizeClaimed(
      claimer?: null,
      epoch?: null,
      amountClaimed?: null
    ): GamePrizeClaimedEventFilter;

    "GameSplitted(uint256,uint256,uint256)"(
      epoch?: null,
      remainingPlayersCount?: null,
      amountWon?: null
    ): GameSplittedEventFilter;
    GameSplitted(
      epoch?: null,
      remainingPlayersCount?: null,
      amountWon?: null
    ): GameSplittedEventFilter;

    "GameWon(uint256,uint256,address,uint256)"(
      epoch?: null,
      winnersCounter?: null,
      playerAddress?: null,
      amountWon?: null
    ): GameWonEventFilter;
    GameWon(
      epoch?: null,
      winnersCounter?: null,
      playerAddress?: null,
      amountWon?: null
    ): GameWonEventFilter;

    "PlayedRound(address)"(playerAddress?: null): PlayedRoundEventFilter;
    PlayedRound(playerAddress?: null): PlayedRoundEventFilter;

    "PrizeAdded(uint256,uint256,uint256,uint256,address,uint256)"(
      epoch?: null,
      position?: null,
      amount?: null,
      standard?: null,
      contractAddress?: null,
      tokenId?: null
    ): PrizeAddedEventFilter;
    PrizeAdded(
      epoch?: null,
      position?: null,
      amount?: null,
      standard?: null,
      contractAddress?: null,
      tokenId?: null
    ): PrizeAddedEventFilter;

    "Received(address,uint256)"(
      sender?: null,
      amount?: null
    ): ReceivedEventFilter;
    Received(sender?: null, amount?: null): ReceivedEventFilter;

    "RegisteredForGame(address,uint256)"(
      playerAddress?: null,
      playersCount?: null
    ): RegisteredForGameEventFilter;
    RegisteredForGame(
      playerAddress?: null,
      playersCount?: null
    ): RegisteredForGameEventFilter;

    "ResetGame(uint256,uint256)"(
      timelock?: null,
      resetId?: null
    ): ResetGameEventFilter;
    ResetGame(timelock?: null, resetId?: null): ResetGameEventFilter;

    "StartedGame(uint256,uint256)"(
      timelock?: null,
      playersCount?: null
    ): StartedGameEventFilter;
    StartedGame(timelock?: null, playersCount?: null): StartedGameEventFilter;

    "TreasuryFeeClaimed(uint256)"(amount?: null): TreasuryFeeClaimedEventFilter;
    TreasuryFeeClaimed(amount?: null): TreasuryFeeClaimedEventFilter;

    "TreasuryFeeClaimedByFactory(uint256)"(
      amount?: null
    ): TreasuryFeeClaimedByFactoryEventFilter;
    TreasuryFeeClaimedByFactory(
      amount?: null
    ): TreasuryFeeClaimedByFactoryEventFilter;

    "TriggeredDailyCheckpoint(uint256,address,uint256)"(
      epoch?: null,
      emmiter?: null,
      timestamp?: null
    ): TriggeredDailyCheckpointEventFilter;
    TriggeredDailyCheckpoint(
      epoch?: null,
      emmiter?: null,
      timestamp?: null
    ): TriggeredDailyCheckpointEventFilter;

    "VoteToSplitPot(uint256,address)"(
      epoch?: null,
      playerAddress?: null
    ): VoteToSplitPotEventFilter;
    VoteToSplitPot(
      epoch?: null,
      playerAddress?: null
    ): VoteToSplitPotEventFilter;
  };

  estimateGas: {
    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCreatorFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPrize(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getERC721TokenIds(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameData(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizes(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getWinners(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _initialization: IGame.InitializationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAllPlayersSplitOk(overrides?: CallOverrides): Promise<BigNumber>;

    isGameAllPrizesStandard(overrides?: CallOverrides): Promise<BigNumber>;

    isGamePayable(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerForGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreatorFee(
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCronUpkeep(
      _cronUpkeep: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEncodedCron(
      _encodedCron: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameData(
      _updateGameData: IGame.UpdateGameDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPlayers(
      _maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlayTimeRange(
      _playTimeRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferCreatorOwnership(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerDailyCheckpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteToSplitPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _contractAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPrizes(
      _prizes: IChild.PrizeStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCreatorFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasuryFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getERC721TokenIds(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizes(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingPlayersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinners(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initialization: IGame.InitializationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAllPlayersSplitOk(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGameAllPrizesStandard(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGamePayable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerForGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTokenERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTokenERC721(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorFee(
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCronUpkeep(
      _cronUpkeep: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEncodedCron(
      _encodedCron: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameData(
      _updateGameData: IGame.UpdateGameDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPlayers(
      _maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlayTimeRange(
      _playTimeRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAdminOwnership(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferCreatorOwnership(
      _creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFactoryOwnership(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerDailyCheckpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteToSplitPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _contractAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
